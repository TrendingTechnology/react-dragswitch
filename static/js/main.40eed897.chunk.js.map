{"version":3,"sources":["../../src/ToggleSwitch.tsx","../../src/DragSwitch.tsx","App.tsx","index.tsx"],"names":["ToggleSwitch","labelProps","useState","onMouseUp","setMouseUpTime","Date","useEffect","window","style","cursor","disabled","filter","className","styles","checked","backgroundColor","onColor","offColor","id","WebkitTransition","MozTransition","transition","boxShadow","hasOutline","focusShadow","handleColor","role","type","defaultChecked","onChange","onFocus","setOutline","onBlur","DragSwitch","switchRef","useRef","handleChange","handleChecked","newChecked","setPos","e","setMouseDown","mouseRelativePos","setDragEnd","setDragging","onMouseMove","isMouseDown","newPos","dragging","ref","onMouseDown","undefined","transform","onClick","App","setChecked","dragChecked","setDragChecked","secondDragChecked","setSecondDragChecked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.40eed897.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styles from './ToggleSwitch.module.css'\n\ninterface Props {\n\tclassName?: string\n\tchecked: boolean\n\tonChange: (checked: boolean) => void\n\tonColor?: string\n\toffColor?: string\n\thandleColor?: string\n\tfocusShadow?: string\n\tdisabled?: boolean\n\t[props: string]: any\n}\n\nconst ToggleSwitch = ({\n\tclassName,\n\tchecked,\n\tonChange,\n\tonColor,\n\toffColor,\n\thandleColor,\n\tfocusShadow,\n\tdisabled,\n\t...labelProps\n}: Props) => {\n\tconst [hasOutline, setOutline] = useState(false)\n\tconst [lastMouseUpTime, setMouseUpTime] = useState(0)\n\n\tconst handleChange = () => {\n\t\tonChange(!checked)\n\t}\n\n\tconst onMouseUp = () => {\n\t\tsetMouseUpTime(Date.now())\n\t}\n\n\tuseEffect(() => {\n\t\twindow.addEventListener('mouseup', onMouseUp)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener('mouseup', onMouseUp)\n\t\t}\n\t}, [])\n\n\treturn (\n\t\t<label\n\t\t\tstyle={{\n\t\t\t\tcursor: disabled ? 'not-allowed' : 'pointer',\n\t\t\t\tfilter: disabled ? 'brightness(0.9)' : 'unset'\n\t\t\t}}\n\t\t\t{...labelProps}\n\t\t\tclassName={`${styles.switch} ${className || ''}`}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName={`${styles.switchBg} ${checked ? styles.isChecked : ''}`}\n\t\t\t\tstyle={{\n\t\t\t\t\tbackgroundColor: checked\n\t\t\t\t\t\t? onColor || '#66bb6a'\n\t\t\t\t\t\t: offColor || '#cccccc'\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<div\n\t\t\t\tid='dragswitch-handle'\n\t\t\t\tclassName={`${styles.switchHandle} ${checked ? styles.isChecked : ''}`}\n\t\t\t\tstyle={{\n\t\t\t\t\tWebkitTransition: 'transform .2s',\n\t\t\t\t\tMozTransition: 'transform .2s',\n\t\t\t\t\ttransition: 'transform .2s',\n\t\t\t\t\tboxShadow: hasOutline\n\t\t\t\t\t\t? focusShadow || 'rgba(0,0,0,0.5) 0px 0px 2px 3px'\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\tbackgroundColor: handleColor || '#ffffff'\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<input\n\t\t\t\trole='switch'\n\t\t\t\taria-checked={checked}\n\t\t\t\ttype='checkbox'\n\t\t\t\tdefaultChecked={checked}\n\t\t\t\tonChange={handleChange}\n\t\t\t\tonFocus={() => {\n\t\t\t\t\t// prevent focus after user clicked switch, allows keyboard to focus switch\n\t\t\t\t\tif (Date.now() - lastMouseUpTime > 25) setOutline(true)\n\t\t\t\t}}\n\t\t\t\tonBlur={() => {\n\t\t\t\t\tsetOutline(false)\n\t\t\t\t}}\n\t\t\t\tdisabled={disabled}\n\t\t\t\tclassName={styles.switchInput}\n\t\t\t/>\n\t\t</label>\n\t)\n}\n\nexport default ToggleSwitch\n","import React, { useRef, useState, useEffect } from 'react'\nimport styles from './ToggleSwitch.module.css'\n\ninterface Props {\n\tclassName?: string\n\tchecked: boolean\n\tonChange: (checked: boolean) => void\n\tonColor?: string\n\toffColor?: string\n\thandleColor?: string\n\tfocusShadow?: string\n\tdisabled?: boolean\n\t[props: string]: any\n}\n\nconst DragSwitch = ({\n\tclassName,\n\tchecked,\n\tonChange,\n\tonColor,\n\toffColor,\n\thandleColor,\n\tfocusShadow,\n\tdisabled,\n\t...labelProps\n}: Props) => {\n\tconst switchRef = useRef<HTMLLabelElement>(null)\n\tconst [Xpos, setPos] = useState(checked ? 20 : 0)\n\tconst [isMouseDown, setMouseDown] = useState(false)\n\tconst [lastMouseUpTime, setMouseUpTime] = useState(0)\n\tconst [hasOutline, setOutline] = useState(false)\n\tconst [dragging, setDragging] = useState(false)\n\tconst [dragEnd, setDragEnd] = useState(0)\n\n\tconst handleChange = () => {\n\t\t// prevent setting checked if user was just dragging\n\t\tif (Date.now() - dragEnd > 25) {\n\t\t\thandleChecked(!checked)\n\t\t}\n\t}\n\n\tconst handleChecked = (newChecked: boolean) => {\n\t\tif (newChecked) {\n\t\t\tsetPos(20)\n\t\t} else {\n\t\t\tsetPos(0)\n\t\t}\n\n\t\tif (newChecked !== checked) onChange(newChecked)\n\t}\n\n\tconst startDrag = (e: React.MouseEvent) => {\n\t\te.preventDefault()\n\n\t\tsetMouseDown(true)\n\t\tsetOutline(true)\n\t}\n\n\tconst onMouseUp = (e: MouseEvent) => {\n\t\tsetMouseDown(false)\n\t\tsetOutline(false)\n\t\tsetMouseUpTime(Date.now())\n\n\t\tif (switchRef.current && dragging) {\n\t\t\tconst mouseRelativePos =\n\t\t\t\te.clientX - switchRef.current.getBoundingClientRect().left\n\n\t\t\tsetDragEnd(Date.now())\n\t\t\tsetDragging(false)\n\n\t\t\tif (mouseRelativePos >= 20) {\n\t\t\t\thandleChecked(true)\n\t\t\t} else {\n\t\t\t\thandleChecked(false)\n\t\t\t}\n\t\t}\n\t}\n\n\tconst onMouseMove = (e: MouseEvent) => {\n\t\tif (isMouseDown && !dragging) {\n\t\t\tsetDragging(true)\n\t\t}\n\n\t\tif (switchRef.current && dragging) {\n\t\t\tconst halfHandle = 8\n\t\t\tconst newPos =\n\t\t\t\te.clientX - switchRef.current.getBoundingClientRect().left - halfHandle\n\n\t\t\tif (newPos < 0) {\n\t\t\t\tsetPos(0)\n\t\t\t} else if (newPos > 20) {\n\t\t\t\tsetPos(20)\n\t\t\t} else {\n\t\t\t\tsetPos(newPos)\n\t\t\t}\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\t// onMouseMove function relies on dragging and isMouseDown state\n\t\twindow.addEventListener('mousemove', onMouseMove)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener('mousemove', onMouseMove)\n\t\t}\n\t}, [dragging, isMouseDown])\n\n\tuseEffect(() => {\n\t\t// onMouseUp function relies on dragging state when setting value\n\t\twindow.addEventListener('mouseup', onMouseUp)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener('mouseup', onMouseUp)\n\t\t}\n\t}, [dragging])\n\n\treturn (\n\t\t<label\n\t\t\tstyle={{\n\t\t\t\tcursor: disabled ? 'not-allowed' : 'pointer',\n\t\t\t\tfilter: disabled ? 'brightness(0.9)' : 'unset'\n\t\t\t}}\n\t\t\t{...labelProps}\n\t\t\tclassName={`${styles.switch} ${className || ''}`}\n\t\t\tref={switchRef}\n\t\t\tonMouseDown={disabled ? undefined : startDrag}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName={`${styles.switchBg} ${checked ? styles.isChecked : ''}`}\n\t\t\t\tstyle={{\n\t\t\t\t\tbackgroundColor: checked\n\t\t\t\t\t\t? onColor || '#66bb6a'\n\t\t\t\t\t\t: offColor || '#cccccc'\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<div\n\t\t\t\tid='dragswitch-handle'\n\t\t\t\tclassName={`${styles.switchHandle} ${checked ? styles.isChecked : ''}`}\n\t\t\t\tstyle={{\n\t\t\t\t\ttransform: `translateX(${Xpos}px)`,\n\t\t\t\t\tWebkitTransition: dragging ? undefined : 'transform .2s',\n\t\t\t\t\tMozTransition: dragging ? undefined : 'transform .2s',\n\t\t\t\t\ttransition: dragging ? undefined : 'transform .2s',\n\t\t\t\t\tboxShadow: hasOutline\n\t\t\t\t\t\t? focusShadow || 'rgba(0,0,0,0.5) 0px 0px 2px 3px'\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\tbackgroundColor: handleColor || '#ffffff'\n\t\t\t\t}}\n\t\t\t\tonClick={e => {\n\t\t\t\t\te.preventDefault()\n\n\t\t\t\t\tsetOutline(false)\n\t\t\t\t\tif (!disabled) handleChange()\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<input\n\t\t\t\trole='switch'\n\t\t\t\taria-checked={checked}\n\t\t\t\ttype='checkbox'\n\t\t\t\tdefaultChecked={checked}\n\t\t\t\tonChange={handleChange}\n\t\t\t\tonFocus={() => {\n\t\t\t\t\t// prevent focus after user clicked/dragged switch\n\t\t\t\t\tif (Date.now() - lastMouseUpTime > 25) setOutline(true)\n\t\t\t\t}}\n\t\t\t\tonBlur={() => {\n\t\t\t\t\tsetOutline(false)\n\t\t\t\t}}\n\t\t\t\tdisabled={disabled}\n\t\t\t\tclassName={styles.switchInput}\n\t\t\t/>\n\t\t</label>\n\t)\n}\n\nexport default DragSwitch\n","import React, { useState } from 'react'\n\nimport { ToggleSwitch, DragSwitch } from 'react-dragswitch'\nimport 'react-dragswitch/dist/index.css'\n\nconst App = () => {\n\tconst [checked, setChecked] = useState(false)\n\tconst [dragChecked, setDragChecked] = useState(false)\n\tconst [secondDragChecked, setSecondDragChecked] = useState(false)\n\n\treturn (\n\t\t<div className='container'>\n\t\t\t<h1>react-dragswitch</h1>\n\t\t\t<h3>Toggle switch</h3>\n\t\t\t<label>\n\t\t\t\t<span className='mr-1'>Click me!</span>\n\t\t\t\t<ToggleSwitch checked={checked} onChange={(e) => {\n\t\t\t\t\tsetChecked(e)\n\t\t\t\t}}/>\n\t\t\t</label>\n<pre>{\n`import { ToggleSwitch } from 'react-dragswitch'\nimport 'react-dragswitch/dist/index.css'\n\n...\n<label>\n    <span>Click me!</span>\n    <ToggleSwitch checked={checked} onChange={(e) => {\n        setChecked(e)\n    }}/>\n</label>\n...`}\n</pre>\n\t\t\t<h3>Disabled toggle switch</h3>\n\t\t\t<ToggleSwitch disabled={true} checked={false} onChange={(e) => {\n\t\t\t\tsetChecked(e)\n\t\t\t}}/>\n<pre>{\n`import { ToggleSwitch } from 'react-dragswitch'\n\n...\n<ToggleSwitch disabled={true} checked={false} onChange={(e) => {\n    setChecked(e)\n}}/>\n...`}\n</pre>\n\t\t\t<h3>Draggable switch</h3>\n\t\t\t<DragSwitch disabled={false} checked={dragChecked} onChange={(e) => {\n\t\t\t\tsetDragChecked(e)\n\t\t\t}}/>\n<pre>{\n`import { DragSwitch } from 'react-dragswitch'\n\n...\n<DragSwitch checked={dragChecked} onChange={(e) => {\n    setDragChecked(e)\n}}/>\n...`}\n</pre>\n\t\t\t<h3>Colored draggable switch with label</h3>\n\t\t\t<label>\n\t\t\t\t<span className='mr-1'>Click me!</span>\n\t\t\t\t<DragSwitch offColor='rgb(200,0,0)' checked={secondDragChecked} onChange={(e) => {\n\t\t\t\t\tsetSecondDragChecked(e)\n\t\t\t\t}}/>\n\t\t\t</label>\n\t\t\t<pre>{\n`import { DragSwitch } from 'react-dragswitch'\n\n...\n<label>\n    <span>Click me!</span>\n    <DragSwitch offColor='rgb(200,0,0)' checked={dragChecked} onChange={(e) => {\n        setDragChecked(e)\n    }}/>\n</label>\n...`}\n</pre>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}