{"version":3,"sources":["../../src/utils.ts","../../src/ToggleSwitch.tsx","../../src/DragSwitch.tsx","App.tsx","index.tsx"],"names":["hexToRGB","hex","rgb","exec","Error","r","parseInt","g","b","RGBtoHex","rHex","gHex","bHex","ToggleSwitch","className","checked","onChange","onColor","offColor","focusShadow","disabled","labelProps","useState","hasOutline","setOutline","lastMouseUpTime","setMouseUpTime","desaturateColor","gray","Math","onMouseUp","Date","useEffect","window","style","cursor","filter","styles","backgroundColor","id","WebkitTransition","MozTransition","transition","boxShadow","undefined","role","type","defaultChecked","onFocus","onBlur","DragSwitch","switchRef","useRef","Xpos","setPos","isMouseDown","setMouseDown","dragging","setDragging","dragEnd","setDragEnd","handleChange","handleChecked","newChecked","e","mouseRelativePos","onMouseMove","newPos","ref","onMouseDown","transform","onClick","App","setChecked","dragChecked","setDragChecked","secondDragChecked","setSecondDragChecked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b37847ee.chunk.js","sourcesContent":["export const hexToRGB = (hex: string) => {\n\tconst rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n\n\tif (!rgb) throw new Error(`${hex} is not a valid hex value`)\n\n\treturn {\n\t\tr: parseInt(rgb[1], 16),\n\t\tg: parseInt(rgb[2], 16),\n\t\tb: parseInt(rgb[3], 16)\n\t}\n}\n\nexport const RGBtoHex = (r: number, g: number, b: number) => {\n\tconst rHex = r.toString(16)\n\tconst gHex = g.toString(16)\n\tconst bHex = b.toString(16)\n\n\treturn `#${rHex.length === 1 ? '0' + rHex : rHex}${\n\t\tgHex.length === 1 ? '0' + gHex : gHex\n\t}${bHex.length === 1 ? '0' + bHex : bHex}`\n}\n","import React, { useState, useEffect } from 'react'\nimport { hexToRGB, RGBtoHex } from './utils'\nimport styles from './ToggleSwitch.module.css'\n\ninterface Props {\n\tclassName?: string\n\tchecked: boolean\n\tonChange: (checked: boolean) => void\n\tonColor?: string\n\toffColor?: string\n\tfocusShadow?: string\n\tdisabled?: boolean\n\t[props: string]: any\n}\n\nconst ToggleSwitch = ({\n\tclassName,\n\tchecked,\n\tonChange,\n\tonColor,\n\toffColor,\n\tfocusShadow,\n\tdisabled,\n\t...labelProps\n}: Props) => {\n\tconst [hasOutline, setOutline] = useState(false)\n\tconst [lastMouseUpTime, setMouseUpTime] = useState(0)\n\n\tconst handleChange = () => {\n\t\tonChange(!checked)\n\t}\n\n\tconst desaturateColor = (hex: string) => {\n\t\tconst rgb = hexToRGB(hex)\n\t\tconst gray = rgb.r * 0.299 + rgb.g * 0.587 + rgb.b * 0.114\n\t\tconst saturation = 0.4\n\n\t\trgb.r = Math.round(rgb.r * saturation + gray * (1 - saturation))\n\t\trgb.g = Math.round(rgb.g * saturation + gray * (1 - saturation))\n\t\trgb.b = Math.round(rgb.b * saturation + gray * (1 - saturation))\n\n\t\treturn RGBtoHex(rgb.r, rgb.g, rgb.b)\n\t}\n\n\tconst getBackgroundColor = () => {\n\t\tif (disabled) {\n\t\t\treturn checked\n\t\t\t\t? desaturateColor(onColor || '#66bb6a')\n\t\t\t\t: desaturateColor(offColor || '#cccccc')\n\t\t}\n\n\t\treturn checked ? onColor || '#66bb6a' : offColor || '#cccccc'\n\t}\n\n\tconst onMouseUp = () => {\n\t\tsetMouseUpTime(Date.now())\n\t}\n\n\tuseEffect(() => {\n\t\twindow.addEventListener('mouseup', onMouseUp)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener('mouseup', onMouseUp)\n\t\t}\n\t}, [])\n\n\treturn (\n\t\t<label\n\t\t\tstyle={{\n\t\t\t\tcursor: disabled ? 'not-allowed' : 'pointer',\n\t\t\t\tfilter: disabled ? 'brightness(0.9)' : 'unset'\n\t\t\t}}\n\t\t\t{...labelProps}\n\t\t\tclassName={`${styles.switch} ${className || ''}`}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName={`${styles.switchBg} ${checked ? styles.isChecked : ''}`}\n\t\t\t\tstyle={{\n\t\t\t\t\tbackgroundColor: getBackgroundColor()\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<div\n\t\t\t\tid='dragswitch-handle'\n\t\t\t\tclassName={`${styles.switchHandle} ${checked ? styles.isChecked : ''}`}\n\t\t\t\tstyle={{\n\t\t\t\t\tWebkitTransition: 'transform .2s',\n\t\t\t\t\tMozTransition: 'transform .2s',\n\t\t\t\t\ttransition: 'transform .2s',\n\t\t\t\t\tboxShadow: hasOutline\n\t\t\t\t\t\t? focusShadow || 'rgba(0,0,0,0.5) 0px 0px 2px 3px'\n\t\t\t\t\t\t: undefined\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<input\n\t\t\t\trole='switch'\n\t\t\t\taria-checked={checked}\n\t\t\t\ttype='checkbox'\n\t\t\t\tdefaultChecked={checked}\n\t\t\t\tonChange={handleChange}\n\t\t\t\tonFocus={() => {\n\t\t\t\t\t// prevent focus after user clicked switch, allows keyboard to focus switch\n\t\t\t\t\tif (Date.now() - lastMouseUpTime > 25) setOutline(true)\n\t\t\t\t}}\n\t\t\t\tonBlur={() => {\n\t\t\t\t\tsetOutline(false)\n\t\t\t\t}}\n\t\t\t\tdisabled={disabled}\n\t\t\t\tclassName={styles.switchInput}\n\t\t\t/>\n\t\t</label>\n\t)\n}\n\nexport default ToggleSwitch\n","import React, { useRef, useState, useEffect } from 'react'\nimport { hexToRGB, RGBtoHex } from './utils'\nimport styles from './ToggleSwitch.module.css'\n\ninterface Props {\n\tclassName?: string\n\tchecked: boolean\n\tonChange: (checked: boolean) => void\n\tonColor?: string\n\toffColor?: string\n\tfocusShadow?: string\n\tdisabled?: boolean\n\t[props: string]: any\n}\n\nconst DragSwitch = ({\n\tclassName,\n\tchecked,\n\tonChange,\n\tonColor,\n\toffColor,\n\tfocusShadow,\n\tdisabled,\n\t...labelProps\n}: Props) => {\n\tconst switchRef = useRef<HTMLLabelElement>(null)\n\tconst [Xpos, setPos] = useState(checked ? 20 : 0)\n\tconst [isMouseDown, setMouseDown] = useState(false)\n\tconst [lastMouseUpTime, setMouseUpTime] = useState(0)\n\tconst [hasOutline, setOutline] = useState(false)\n\tconst [dragging, setDragging] = useState(false)\n\tconst [dragEnd, setDragEnd] = useState(0)\n\n\tconst handleChange = () => {\n\t\t// prevent setting checked if user was just dragging\n\t\tif (Date.now() - dragEnd > 25) {\n\t\t\thandleChecked(!checked)\n\t\t}\n\t}\n\n\tconst handleChecked = (newChecked: boolean) => {\n\t\tif (newChecked) {\n\t\t\tsetPos(20)\n\t\t} else {\n\t\t\tsetPos(0)\n\t\t}\n\n\t\tif (newChecked !== checked) onChange(newChecked)\n\t}\n\n\tconst desaturateColor = (hex: string) => {\n\t\tconst rgb = hexToRGB(hex)\n\t\tconst gray = rgb.r * 0.299 + rgb.g * 0.587 + rgb.b * 0.114\n\t\tconst saturation = 0.4\n\n\t\trgb.r = Math.round(rgb.r * saturation + gray * (1 - saturation))\n\t\trgb.g = Math.round(rgb.g * saturation + gray * (1 - saturation))\n\t\trgb.b = Math.round(rgb.b * saturation + gray * (1 - saturation))\n\n\t\treturn RGBtoHex(rgb.r, rgb.g, rgb.b)\n\t}\n\n\tconst getBackgroundColor = () => {\n\t\tif (disabled) {\n\t\t\treturn checked\n\t\t\t\t? desaturateColor(onColor || '#66bb6a')\n\t\t\t\t: desaturateColor(offColor || '#cccccc')\n\t\t}\n\n\t\treturn checked ? onColor || '#66bb6a' : offColor || '#cccccc'\n\t}\n\n\tconst startDrag = (e: React.MouseEvent) => {\n\t\te.preventDefault()\n\n\t\tsetMouseDown(true)\n\t\tsetOutline(true)\n\t}\n\n\tconst onMouseUp = (e: MouseEvent) => {\n\t\tsetMouseDown(false)\n\t\tsetOutline(false)\n\t\tsetMouseUpTime(Date.now())\n\n\t\tif (switchRef.current && dragging) {\n\t\t\tconst mouseRelativePos =\n\t\t\t\te.clientX - switchRef.current.getBoundingClientRect().left\n\n\t\t\tsetDragEnd(Date.now())\n\t\t\tsetDragging(false)\n\n\t\t\tif (mouseRelativePos >= 20) {\n\t\t\t\thandleChecked(true)\n\t\t\t} else {\n\t\t\t\thandleChecked(false)\n\t\t\t}\n\t\t}\n\t}\n\n\tconst onMouseMove = (e: MouseEvent) => {\n\t\tif (isMouseDown && !dragging) {\n\t\t\tsetDragging(true)\n\t\t}\n\n\t\tif (switchRef.current && dragging) {\n\t\t\tconst halfHandle = 8\n\t\t\tconst newPos =\n\t\t\t\te.clientX - switchRef.current.getBoundingClientRect().left - halfHandle\n\n\t\t\tif (newPos < 0) {\n\t\t\t\tsetPos(0)\n\t\t\t} else if (newPos > 20) {\n\t\t\t\tsetPos(20)\n\t\t\t} else {\n\t\t\t\tsetPos(newPos)\n\t\t\t}\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\t// onMouseMove function relies on dragging and isMouseDown state\n\t\twindow.addEventListener('mousemove', onMouseMove)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener('mousemove', onMouseMove)\n\t\t}\n\t}, [dragging, isMouseDown])\n\n\tuseEffect(() => {\n\t\t// onMouseUp function relies on dragging state when setting value\n\t\twindow.addEventListener('mouseup', onMouseUp)\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener('mouseup', onMouseUp)\n\t\t}\n\t}, [dragging])\n\n\treturn (\n\t\t<label\n\t\t\tstyle={{\n\t\t\t\tcursor: disabled ? 'not-allowed' : 'pointer',\n\t\t\t\tfilter: disabled ? 'brightness(0.9)' : 'unset'\n\t\t\t}}\n\t\t\t{...labelProps}\n\t\t\tclassName={`${styles.switch} ${className || ''}`}\n\t\t\tref={switchRef}\n\t\t\tonMouseDown={disabled ? undefined : startDrag}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName={`${styles.switchBg} ${checked ? styles.isChecked : ''}`}\n\t\t\t\tstyle={{\n\t\t\t\t\tbackgroundColor: getBackgroundColor()\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<div\n\t\t\t\tid='dragswitch-handle'\n\t\t\t\tclassName={`${styles.switchHandle} ${checked ? styles.isChecked : ''}`}\n\t\t\t\tstyle={{\n\t\t\t\t\ttransform: `translateX(${Xpos}px)`,\n\t\t\t\t\tWebkitTransition: dragging ? undefined : 'transform .2s',\n\t\t\t\t\tMozTransition: dragging ? undefined : 'transform .2s',\n\t\t\t\t\ttransition: dragging ? undefined : 'transform .2s',\n\t\t\t\t\tboxShadow: hasOutline\n\t\t\t\t\t\t? focusShadow || 'rgba(0,0,0,0.5) 0px 0px 2px 3px'\n\t\t\t\t\t\t: undefined\n\t\t\t\t}}\n\t\t\t\tonClick={e => {\n\t\t\t\t\te.preventDefault()\n\n\t\t\t\t\tsetOutline(false)\n\t\t\t\t\tif (!disabled) handleChange()\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<input\n\t\t\t\trole='switch'\n\t\t\t\taria-checked={checked}\n\t\t\t\ttype='checkbox'\n\t\t\t\tdefaultChecked={checked}\n\t\t\t\tonChange={handleChange}\n\t\t\t\tonFocus={() => {\n\t\t\t\t\t// prevent focus after user clicked/dragged switch\n\t\t\t\t\tif (Date.now() - lastMouseUpTime > 25) setOutline(true)\n\t\t\t\t}}\n\t\t\t\tonBlur={() => {\n\t\t\t\t\tsetOutline(false)\n\t\t\t\t}}\n\t\t\t\tdisabled={disabled}\n\t\t\t\tclassName={styles.switchInput}\n\t\t\t/>\n\t\t</label>\n\t)\n}\n\nexport default DragSwitch\n","import React, { useState } from 'react'\n\nimport { ToggleSwitch, DragSwitch } from 'react-dragswitch'\nimport 'react-dragswitch/dist/index.css'\n\nconst App = () => {\n\tconst [checked, setChecked] = useState(false)\n\tconst [dragChecked, setDragChecked] = useState(false)\n\tconst [secondDragChecked, setSecondDragChecked] = useState(false)\n\n\treturn (\n\t\t<div className='container'>\n\t\t\t<h1>react-dragswitch</h1>\n\t\t\t<h3>Toggle switch</h3>\n\t\t\t<label>\n\t\t\t\t<span className='mr-1'>Click me!</span>\n\t\t\t\t<ToggleSwitch checked={checked} onChange={(e) => {\n\t\t\t\t\tsetChecked(e)\n\t\t\t\t}}/>\n\t\t\t</label>\n<pre>{\n`import { ToggleSwitch } from 'react-dragswitch'\n\n...\n<label>\n    <span>Click me!</span>\n    <ToggleSwitch checked={checked} onChange={(e) => {\n        setChecked(e)\n    }}/>\n</label>\n...`}\n</pre>\n\t\t\t<h3>Disabled toggle switch</h3>\n\t\t\t<ToggleSwitch disabled={true} checked={false} onChange={(e) => {\n\t\t\t\tsetChecked(e)\n\t\t\t}}/>\n<pre>{\n`import { ToggleSwitch } from 'react-dragswitch'\n\n...\n<ToggleSwitch disabled={true} checked={false} onChange={(e) => {\n    setChecked(e)\n}}/>\n...`}\n</pre>\n\t\t\t<h3>Draggable switch</h3>\n\t\t\t<DragSwitch disabled={false} checked={dragChecked} onChange={(e) => {\n\t\t\t\tsetDragChecked(e)\n\t\t\t}}/>\n<pre>{\n`import { DragSwitch } from 'react-dragswitch'\n\n...\n<DragSwitch checked={dragChecked} onChange={(e) => {\n    setDragChecked(e)\n}}/>\n...`}\n</pre>\n\t\t\t<h3>Draggable switch with label</h3>\n\t\t\t<label>\n\t\t\t\t<span className='mr-1'>Click me!</span>\n\t\t\t\t<DragSwitch checked={secondDragChecked} onChange={(e) => {\n\t\t\t\t\tsetSecondDragChecked(e)\n\t\t\t\t}}/>\n\t\t\t</label>\n\t\t\t<pre>{\n`import { DragSwitch } from 'react-dragswitch'\n\n...\n<label>\n    <span>Click me!</span>\n    <DragSwitch checked={dragChecked} onChange={(e) => {\n        setDragChecked(e)\n    }}/>\n</label>\n...`}\n</pre>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}